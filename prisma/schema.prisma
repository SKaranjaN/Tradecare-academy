datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quiz      Quiz[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  quizId String?
  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//quiz tables

model Quiz {
  id          String  @id @default(uuid())
  title       String
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  questions Question[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Chapter   Chapter[]

  @@index([courseId])
}



model Question {
    id            Int        @id @default(autoincrement()) // Auto-incremented primary key
    text          String // Text of the question
    correctOption String // Correct answer to the question
    options       Option[] // Relation to Option model for multiple choices
    responses     Response[] // Relation to Response model for user responses

    quizId String
    quiz   Quiz   @relation(fields: [quizId], references: [id])

    @@index([correctOption], name: "idx_question_correct_option") // Index on correctOption for optimized querying
}

// Option model represents choices for a quiz question
model Option {
    id         Int      @id @default(autoincrement()) // Auto-incremented primary key
    question   Question @relation(fields: [questionId], references: [id]) // Relation to Question model
    questionId Int // Foreign key to Question model
    text       String // Text of the option

    @@index([questionId], name: "idx_option_question_id") // Index on questionId for optimized querying
}

// Response model represents a user's response to a quiz question
model Response {
    id             Int      @id @default(autoincrement()) // Auto-incremented primary key
    userId         String // User identifier
    question       Question @relation(fields: [questionId], references: [id]) // Relation to Question model
    questionId     Int // Foreign key to Question model
    selectedOption String // Option selected by the user
    isCorrect      Boolean // Indicates if the response is correct

    @@index([userId], name: "idx_response_user_id") // Index on userId for optimized querying
    @@index([questionId], name: "idx_response_question_id") // Index on questionId for optimized querying
}